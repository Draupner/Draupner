using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using Blah.Core.Common.Persistence;
using Blah.Core.Domain.Model;
using Blah.Core.Domain.Repositories;
using Blah.Web.Common.AutoMapper;
using Blah.Web.Controllers;
using Blah.Web.Models;
using MvcContrib.Pagination;
using MvcContrib.Sorting;
using MvcContrib.UI.Grid;
using Xunit;
using Ploeh.AutoFixture;
using Rhino.Mocks;

namespace Blah.Test.Controllers
{
    public class MyBookControllerTests
    {
        private readonly MockRepository mocks;
        private readonly IBookRepository bookRepositoryMock;
        private readonly MyBookController controller;
        private readonly Fixture fixture;
        private readonly AutoMapperConfiguration autoMapperConfiguration;

        public MyBookControllerTests()
        {
            autoMapperConfiguration = new AutoMapperConfiguration();
            autoMapperConfiguration.Configure();
            fixture = new Fixture();

            mocks = new MockRepository();
            bookRepositoryMock = mocks.DynamicMock<IBookRepository>();
            controller = new MyBookController(bookRepositoryMock);
        }

        [Fact]
        public void ShouldGetIndex()
        {
            var page = new Page<Book>(new List<Book> { new Book(), new Book() }, 5, 10, 100);
            Expect.Call(bookRepositoryMock.FindPage(5, 10, "Id", SortOrder.Ascending)).Return(page);

            mocks.ReplayAll();

            var sortOptions = new GridSortOptions { Column = "Id", Direction = SortDirection.Ascending };
            var result = controller.Index(5, sortOptions) as ViewResult;
            
            mocks.VerifyAll();

            Assert.NotNull(result);

            var pagination = (IPagination<BookViewModel>)result.Model;
            Assert.Equal(5, pagination.PageNumber);
            Assert.Equal(10, pagination.PageSize);
            Assert.Equal(100, pagination.TotalItems);
            Assert.Equal(2, pagination.Count());

            Assert.Equal(result.ViewData["sort"], sortOptions);
        }
    }
}