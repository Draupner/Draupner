using System.Collections.Generic;
using System.Linq;
using @(Model.CoreNamespace).Common.Persistence;
using @(Model.CoreNamespace).Domain.Model;
using @(Model.CoreNamespace).Domain.Repositories;
using @(Model.CoreNamespace).Repositories;
using Xunit;
using Ploeh.AutoFixture;

namespace @(Model.TestNamespace).Repositories
{
    public class @(Model.Entity.Name)RepositoryTests : PersistenceTest
    {
        private readonly I@(Model.Entity.Name)Repository repository;
        private readonly IFixture fixture;

        public @(Model.Entity.Name)RepositoryTests()
        {
            repository = new @(Model.Entity.Name)Repository(UnitOfWork);
            fixture = new Fixture().Customize(new AutoFixtureCustomization());
        }

        [Fact]
        public void ShouldAdd()
        {
            var @(Model.Entity.VariableName) = fixture.CreateAnonymous<@(Model.Entity.Name)>();

            repository.Add(@(Model.Entity.VariableName));
            Assert.NotNull(@(Model.Entity.VariableName).Id);

            using (var session = CreateSession())
            {
                int count = session.QueryOver<@(Model.Entity.Name)>().RowCount();
                Assert.Equal(1, count);

                @(Model.Entity.Name) persisted@(Model.Entity.Name) = session.QueryOver<@(Model.Entity.Name)>().List().FirstOrDefault();
                @foreach (var entityProperty in Model.Entity.BasicProperties) {
                @:Assert.Equal(@(Model.Entity.VariableName).@(entityProperty.Name), persisted@(Model.Entity.Name).@(entityProperty.Name));
				}
            }
        }

        [Fact]
        public void ShouldGet()
        {
            @(Model.Entity.Name) persisted@(Model.Entity.Name);
            using (var session = CreateSession())
            {
                persisted@(Model.Entity.Name) = fixture.CreateAnonymous<@(Model.Entity.Name)>();
                session.Save(persisted@(Model.Entity.Name));
                session.Flush();
            }

            var @(Model.Entity.VariableName) = repository.Get(persisted@(Model.Entity.Name).Id);
            Assert.NotNull(@(Model.Entity.VariableName));
            @foreach (var entityProperty in Model.Entity.BasicProperties) {
            @:Assert.Equal(@(Model.Entity.VariableName).@(entityProperty.Name), persisted@(Model.Entity.Name).@(entityProperty.Name));
			}
        }

        [Fact]
        public void ShouldDelete()
        {
            var id = CreateAndPersist(1).FirstOrDefault();

            var @(Model.Entity.VariableName) = repository.Get(id);
            repository.Delete(@(Model.Entity.VariableName));
            UnitOfWork.SaveChanges();

            using (var session = CreateSession())
            {
                var count = session.QueryOver<@(Model.Entity.Name)>().RowCount();
                Assert.Equal(0, count);
            }
        }

        [Fact]
        public void ShouldCountAll()
        {
            CreateAndPersist(4);

            var count = repository.CountAll();
            Assert.Equal(4, count);
        }

        [Fact]
        public void ShouldGetAll()
        {
            CreateAndPersist(3);

            var all = repository.FindAll();
            Assert.Equal(3, all.Count);
        }

        [Fact]
        public void ShouldGetAllPagedSortedAscending()
        {
            var ids = CreateAndPersist(5);

            var page1 = repository.FindPage(1, 2, "Id", SortOrder.Ascending);
            Assert.Equal(2, page1.Items.Count());
            Assert.Equal(5, page1.TotalItemCount);

            var page2 = repository.FindPage(2, 2, "Id", SortOrder.Ascending);
            Assert.Equal(2, page2.Items.Count());
            Assert.Equal(5, page2.TotalItemCount);

            var page3 = repository.FindPage(3, 2, "Id", SortOrder.Ascending);
            Assert.Equal(1, page3.Items.Count());
            Assert.Equal(5, page3.TotalItemCount);

            var allIds = page1.Items.Union(page2.Items).Union(page3.Items).Select(u => u.Id).ToList();

            ids.Sort();
            Assert.Equal(ids, allIds);
        }

        [Fact]
        public void ShouldGetAllPagedSortedDescinding()
        {
            var ids = CreateAndPersist(5);

            var page1 = repository.FindPage(1, 2, "Id", SortOrder.Descending);
            Assert.Equal(2, page1.Items.Count());
            Assert.Equal(5, page1.TotalItemCount);

            var page2 = repository.FindPage(2, 2, "Id", SortOrder.Descending);
            Assert.Equal(2, page2.Items.Count());
            Assert.Equal(5, page2.TotalItemCount);

            var page3 = repository.FindPage(3, 2, "Id", SortOrder.Descending);
            Assert.Equal(1, page3.Items.Count());
            Assert.Equal(5, page3.TotalItemCount);

            var allIds = page1.Items.Union(page2.Items).Union(page3.Items).Select(u => u.Id).ToList();

            ids.Sort((x,y) => y.CompareTo(x));
            Assert.Equal(ids, allIds);
        }

        private List<long> CreateAndPersist(int count)
        {
            var ids = new List<long>();
            using (var session = CreateSession())
            {
                for (int i = 0; i < count; i++)
                {
                    var @(Model.Entity.VariableName) = fixture.CreateAnonymous<@(Model.Entity.Name)>();
                    session.Save(@(Model.Entity.VariableName));
                    session.Flush();
                    ids.Add(@(Model.Entity.VariableName).Id); 
                }
            }
            return ids;
        }
    }
}
