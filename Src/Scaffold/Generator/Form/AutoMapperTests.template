using System.Collections.Generic;
using System.Linq;
using AutoMapper;
using @(Model.CoreNamespace).Common.Persistence;
using @(Model.CoreNamespace).Domain.Model;
using @(Model.WebNamespace).Common.AutoMapper;
using @(Model.WebNamespace).Models;
using MvcContrib.Pagination;
using Xunit;
using Ploeh.AutoFixture;

namespace @(Model.TestNamespace).Common.AutoMapper
{
    public class @(Model.FormName)AutoMapperTests
    {
        private readonly IFixture fixture;
        private readonly AutoMapperConfiguration autoMapperConfiguration;

        public @(Model.FormName)AutoMapperTests()
        {
            fixture = new Fixture().Customize(new AutoFixtureCustomization());
            autoMapperConfiguration = new AutoMapperConfiguration();
            autoMapperConfiguration.Configure();
        }

        [Fact]
        public void ShouldMap@(Model.Entity.Name)ToViewModel()
        {
            var @(Model.Entity.VariableName) = fixture.CreateAnonymous<@(Model.Entity.Name)>();
            var viewModel = Mapper.Map<@(Model.Entity.Name), @(Model.FormName)ViewModel>(@(Model.Entity.VariableName));

			@foreach(var property in Model.Entity.BasicProperties) {
            @:Assert.Equal(@(Model.Entity.VariableName).@property.Name, viewModel.@property.Name);
			}
        }

        [Fact]
        public void ShouldMapViewModelTo@(Model.Entity.Name)()
        {
            var viewModel = fixture.CreateAnonymous<@(Model.FormName)ViewModel>();
            var @(Model.Entity.VariableName) = Mapper.Map<@(Model.FormName)ViewModel, @(Model.Entity.Name)>(viewModel);

			@foreach(var property in Model.Entity.BasicProperties) {
            @:Assert.Equal(viewModel.@property.Name, @(Model.Entity.VariableName).@property.Name);
			}
        }

        [Fact]
        public void ShouldMapPageToPagination()
        {
            var page = new Page<@(Model.Entity.Name)>(new List<@(Model.Entity.Name)>{new @(Model.Entity.Name)(), new @(Model.Entity.Name)()}, 3, 10, 300);
            var pagination = Mapper.Map<Page<@(Model.Entity.Name)>, IPagination<@(Model.FormName)ViewModel>>(page);

            Assert.Equal(page.PageNumber, pagination.PageNumber);
            Assert.Equal(page.PageSize, pagination.PageSize);
            Assert.Equal(page.TotalItemCount, pagination.TotalItems);
            Assert.Equal(page.Items.Count(), pagination.Count());
        }
    }
}
